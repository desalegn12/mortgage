{"ast":null,"code":"var calculatePayments = function calculatePayments(initial, years, rate, monthlyOverpayment) {\n  var overpayments = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var monthlyRatePct = rate / 1200;\n  var monthlyPayment = monthlyRatePct === 0 ? initial / years / 12 : initial * monthlyRatePct / (1 - Math.pow(1 / (1 + monthlyRatePct), years * 12));\n  var balance = initial;\n  var baseline = initial;\n  var payments = [{\n    overpayment: 0,\n    balance: balance,\n    baseline: baseline\n  }];\n  var partial;\n\n  var _loop = function _loop(year) {\n    var interestYearly = 0;\n    var overpaymentYearly = 0;\n\n    var _loop2 = function _loop2(month) {\n      var overpayment = overpayments.filter(function (x) {\n        return +x.year === year && +x.month === month;\n      }).reduce(function (acc, val) {\n        return acc + +val.amount;\n      }, 0);\n      var interestMonth = balance * monthlyRatePct;\n      interestYearly += interestMonth;\n      overpaymentYearly += overpayment;\n      balance -= monthlyPayment + monthlyOverpayment + overpayment - interestMonth;\n      baseline -= monthlyPayment - baseline * monthlyRatePct;\n\n      if (balance <= 0) {\n        balance = 0;\n\n        if (partial === undefined && month !== 12) {\n          partial = month;\n        }\n      }\n    };\n\n    for (var month = 1; month <= 12; month++) {\n      _loop2(month);\n    }\n\n    payments.push({\n      baseline: baseline,\n      interestYearly: interestYearly,\n      balance: balance,\n      partial: partial,\n      overpayment: overpaymentYearly + +monthlyOverpayment * (partial || 12)\n    });\n    if (partial) partial = 0;\n  };\n\n  for (var year = 0; year < years; year++) {\n    _loop(year);\n  }\n\n  return {\n    monthlyPayment: monthlyPayment,\n    payments: payments\n  };\n};\n\nexport default calculatePayments;","map":{"version":3,"sources":["/home/oem/facebok/react/mortgage/src/calculations.js"],"names":["calculatePayments","initial","years","rate","monthlyOverpayment","overpayments","monthlyRatePct","monthlyPayment","Math","pow","balance","baseline","payments","overpayment","partial","year","interestYearly","overpaymentYearly","month","filter","x","reduce","acc","val","amount","interestMonth","undefined","push"],"mappings":"AAAA,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CACzBC,OADyB,EAEzBC,KAFyB,EAGzBC,IAHyB,EAIzBC,kBAJyB,EAMrB;AAAA,MADJC,YACI,uEADW,EACX;AACJ,MAAMC,cAAc,GAAGH,IAAI,GAAG,IAA9B;AAEA,MAAMI,cAAc,GACnBD,cAAc,KAAK,CAAnB,GACGL,OAAO,GAAGC,KAAV,GAAkB,EADrB,GAEID,OAAO,GAAGK,cAAX,IACC,IAAIE,IAAI,CAACC,GAAL,CAAS,KAAK,IAAIH,cAAT,CAAT,EAAmCJ,KAAK,GAAG,EAA3C,CADL,CAHJ;AAKA,MAAIQ,OAAO,GAAGT,OAAd;AACA,MAAIU,QAAQ,GAAGV,OAAf;AACA,MAAIW,QAAQ,GAAG,CAAC;AAAEC,IAAAA,WAAW,EAAE,CAAf;AAAkBH,IAAAA,OAAO,EAAPA,OAAlB;AAA2BC,IAAAA,QAAQ,EAARA;AAA3B,GAAD,CAAf;AACA,MAAIG,OAAJ;;AAXI,6BAaKC,IAbL;AAcH,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,iBAAiB,GAAG,CAAxB;;AAfG,iCAgBMC,KAhBN;AAiBF,UAAML,WAAW,GAAGR,YAAY,CAC9Bc,MADkB,CACX,UAACC,CAAD;AAAA,eAAO,CAACA,CAAC,CAACL,IAAH,KAAYA,IAAZ,IAAoB,CAACK,CAAC,CAACF,KAAH,KAAaA,KAAxC;AAAA,OADW,EAElBG,MAFkB,CAEX,UAACC,GAAD,EAAMC,GAAN;AAAA,eAAcD,GAAG,GAAG,CAACC,GAAG,CAACC,MAAzB;AAAA,OAFW,EAEsB,CAFtB,CAApB;AAGA,UAAIC,aAAa,GAAGf,OAAO,GAAGJ,cAA9B;AACAU,MAAAA,cAAc,IAAIS,aAAlB;AACAR,MAAAA,iBAAiB,IAAIJ,WAArB;AACAH,MAAAA,OAAO,IACNH,cAAc,GAAGH,kBAAjB,GAAsCS,WAAtC,GAAoDY,aADrD;AAEAd,MAAAA,QAAQ,IAAIJ,cAAc,GAAGI,QAAQ,GAAGL,cAAxC;;AAEA,UAAII,OAAO,IAAI,CAAf,EAAkB;AACjBA,QAAAA,OAAO,GAAG,CAAV;;AACA,YAAII,OAAO,KAAKY,SAAZ,IAAyBR,KAAK,KAAK,EAAvC,EAA2C;AAC1CJ,UAAAA,OAAO,GAAGI,KAAV;AACA;AACD;AAhCC;;AAgBH,SAAK,IAAIA,KAAK,GAAG,CAAjB,EAAoBA,KAAK,IAAI,EAA7B,EAAiCA,KAAK,EAAtC,EAA0C;AAAA,aAAjCA,KAAiC;AAiBzC;;AAEDN,IAAAA,QAAQ,CAACe,IAAT,CAAc;AACbhB,MAAAA,QAAQ,EAARA,QADa;AAEbK,MAAAA,cAAc,EAAdA,cAFa;AAGbN,MAAAA,OAAO,EAAPA,OAHa;AAIbI,MAAAA,OAAO,EAAPA,OAJa;AAKbD,MAAAA,WAAW,EAAEI,iBAAiB,GAAG,CAACb,kBAAD,IAAuBU,OAAO,IAAI,EAAlC;AALpB,KAAd;AAOA,QAAIA,OAAJ,EAAaA,OAAO,GAAG,CAAV;AA1CV;;AAaJ,OAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGb,KAA1B,EAAiCa,IAAI,EAArC,EAAyC;AAAA,UAAhCA,IAAgC;AA8BxC;;AACD,SAAO;AAAER,IAAAA,cAAc,EAAdA,cAAF;AAAkBK,IAAAA,QAAQ,EAARA;AAAlB,GAAP;AACA,CAnDD;;AAqDA,eAAeZ,iBAAf","sourcesContent":["const calculatePayments = (\r\n\tinitial,\r\n\tyears,\r\n\trate,\r\n\tmonthlyOverpayment,\r\n\toverpayments = []\r\n) => {\r\n\tconst monthlyRatePct = rate / 1200;\r\n\r\n\tconst monthlyPayment =\r\n\t\tmonthlyRatePct === 0\r\n\t\t\t? initial / years / 12\r\n\t\t\t: (initial * monthlyRatePct) /\r\n\t\t\t  (1 - Math.pow(1 / (1 + monthlyRatePct), years * 12));\r\n\tlet balance = initial;\r\n\tlet baseline = initial;\r\n\tlet payments = [{ overpayment: 0, balance, baseline }];\r\n\tlet partial;\r\n\r\n\tfor (let year = 0; year < years; year++) {\r\n\t\tlet interestYearly = 0;\r\n\t\tlet overpaymentYearly = 0;\r\n\t\tfor (let month = 1; month <= 12; month++) {\r\n\t\t\tconst overpayment = overpayments\r\n\t\t\t\t.filter((x) => +x.year === year && +x.month === month)\r\n\t\t\t\t.reduce((acc, val) => acc + +val.amount, 0);\r\n\t\t\tlet interestMonth = balance * monthlyRatePct;\r\n\t\t\tinterestYearly += interestMonth;\r\n\t\t\toverpaymentYearly += overpayment;\r\n\t\t\tbalance -=\r\n\t\t\t\tmonthlyPayment + monthlyOverpayment + overpayment - interestMonth;\r\n\t\t\tbaseline -= monthlyPayment - baseline * monthlyRatePct;\r\n\r\n\t\t\tif (balance <= 0) {\r\n\t\t\t\tbalance = 0;\r\n\t\t\t\tif (partial === undefined && month !== 12) {\r\n\t\t\t\t\tpartial = month;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpayments.push({\r\n\t\t\tbaseline,\r\n\t\t\tinterestYearly,\r\n\t\t\tbalance,\r\n\t\t\tpartial,\r\n\t\t\toverpayment: overpaymentYearly + +monthlyOverpayment * (partial || 12),\r\n\t\t});\r\n\t\tif (partial) partial = 0;\r\n\t}\r\n\treturn { monthlyPayment, payments };\r\n};\r\n\r\nexport default calculatePayments;\r\n"]},"metadata":{},"sourceType":"module"}